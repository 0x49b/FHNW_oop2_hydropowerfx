group 'ch.fhnw'
version '0.1-SNAPSHOT'



apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'org.junit.platform.gradle.plugin'


repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
}


dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.3")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.3")
    //compile group: 'com.sothawo', name: 'mapjfx', version: '1.8.0'
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile "org.neo4j:neo4j:3.4.0"
    compile 'org.neo4j:neo4j-ogm-core:3.1.0'
    runtime 'org.neo4j:neo4j-ogm-embedded-driver:3.1.0'
    runtime 'org.slf4j:slf4j-simple:1.7.25'
    compile group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13'
}

junitPlatform {
    // platformVersion '1.0.3'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
}

// Include dependent libraries in archive.
jar {
    manifest {
        attributes "Manifest-Version": "1.0",
                "Main-Class": "ch.fhnw.oop2.hydropowerfx.HydroPowerApp"
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    baseName = rootProject.name
    zip64 true
    from {
        configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
